<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome on Documentation for pREST</title>
    <link>https://postgres.rest/</link>
    <description>Recent content in Welcome on Documentation for pREST</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Apr 2016 15:21:22 +0200</lastBuildDate>
    
	<atom:link href="https://postgres.rest/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Installation</title>
      <link>https://postgres.rest/getting-started/installation/</link>
      <pubDate>Sat, 23 Apr 2016 15:21:22 +0200</pubDate>
      
      <guid>https://postgres.rest/getting-started/installation/</guid>
      <description>Here are all the ways you can install pREST, choose one that best fits your needs.
Index  Downloading the binary With Docker Using go get With Homebrew  Downloading the binary For any OS you can download the latest version here.
With Docker We only will need to download the pREST image from Docker Hub with:
docker pull prest/prest  Using go get go get -u github.com/prest/prest  With Homebrew If none of the above suits you, there&amp;rsquo;s still an option of installing using Homebrew</description>
    </item>
    
    <item>
      <title>Running</title>
      <link>https://postgres.rest/getting-started/running/</link>
      <pubDate>Sat, 23 Apr 2016 15:21:22 +0200</pubDate>
      
      <guid>https://postgres.rest/getting-started/running/</guid>
      <description> Running Now that you installed pREST, you have a choice. Either run it with a pre-existing database or with a new one:
 With a new database Already have a database  </description>
    </item>
    
    <item>
      <title>New database</title>
      <link>https://postgres.rest/getting-started/new-database/</link>
      <pubDate>Sat, 23 Apr 2016 15:21:22 +0200</pubDate>
      
      <guid>https://postgres.rest/getting-started/new-database/</guid>
      <description>First you&amp;rsquo;ll need a running instance of PostgreSQL with a database, you can go to the PostgreSQL official documentation page on how to do that.
Now that you have a database (instructions 1.1 through 1.3 Postgres&amp;rsquo; Getting Started tutorial linked above) you can follow the steps in the Pre-existing database page to configurate pREST according to pREST installation method you chose earlier.</description>
    </item>
    
    <item>
      <title>Pre-existing database</title>
      <link>https://postgres.rest/getting-started/already-have-db/</link>
      <pubDate>Sat, 23 Apr 2016 15:21:22 +0200</pubDate>
      
      <guid>https://postgres.rest/getting-started/already-have-db/</guid>
      <description>Even though there were four ways to install pREST there&amp;rsquo;s mostly two ways to run it.
 With the binary or homebrew or go get With Docker or Docker Compose  With the binary or homebrew or go get If you install pREST by downloading the binary or using Homebrew or using go get, you must pass the necessary variables binary as follows:
PREST_PG_USER=postgres \ PREST_PG_DATABASE=prest \ PREST_PG_PORT=5432 \ PREST_HTTP_PORT=3010 \ prest # Binary installed  With docker Considering you already did the pull in the previous step:</description>
    </item>
    
    <item>
      <title>Disable JWT Middleware</title>
      <link>https://postgres.rest/prest-as-web-framework/custom-middlewares/disable-jwt/</link>
      <pubDate>Tue, 28 Feb 2017 16:05:05 -0300</pubDate>
      
      <guid>https://postgres.rest/prest-as-web-framework/custom-middlewares/disable-jwt/</guid>
      <description>Using pREST as framework is common to need to do endpoint for authentication, and that endpoint cannot ask for JWT (header) because it will generate the token.
Create sub routes without JWT? package main import ( &amp;quot;encoding/json&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;time&amp;quot; jwt &amp;quot;github.com/dgrijalva/jwt-go&amp;quot; &amp;quot;github.com/gorilla/mux&amp;quot; &amp;quot;github.com/prest/adapters/postgres&amp;quot; &amp;quot;github.com/prest/cmd&amp;quot; &amp;quot;github.com/prest/config&amp;quot; &amp;quot;github.com/prest/config/router&amp;quot; &amp;quot;github.com/prest/middlewares&amp;quot; &amp;quot;github.com/urfave/negroni&amp;quot; ) const authPrefix = &amp;quot;/auth&amp;quot; // Body data structure used to receive request type Body struct { Username string Password string } // Auth data structure used to return authentication token type Auth struct { Token string } func main() { // start pREST config config.</description>
    </item>
    
  </channel>
</rss>